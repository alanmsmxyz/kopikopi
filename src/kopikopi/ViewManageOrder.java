/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kopikopi;

import java.awt.event.*;
import javax.swing.*;
import javax.swing.table.*;

/**
 *
 * @author alanmsmxyz
 */
public class ViewBarista extends javax.swing.JFrame {

    /**
     * Creates new form serverView
     */
    public ViewBarista() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        containerOrderDetails = new javax.swing.JPanel();
        labelOrderDetails = new javax.swing.JLabel();
        containerTableOrderItems = new javax.swing.JScrollPane();
        tableOrderItems = new javax.swing.JTable();
        btnFinishOrder = new javax.swing.JButton();
        containerOrderSelector = new javax.swing.JPanel();
        labelOrderSelector = new javax.swing.JLabel();
        containerListOrders = new javax.swing.JScrollPane();
        listOrders = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelOrderDetails.setText("Detail Order");

        tableOrderItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kopi", "Jumlah", "Harga", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        containerTableOrderItems.setViewportView(tableOrderItems);

        btnFinishOrder.setText("Selesaikan Order");
        btnFinishOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinishOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout containerOrderDetailsLayout = new javax.swing.GroupLayout(containerOrderDetails);
        containerOrderDetails.setLayout(containerOrderDetailsLayout);
        containerOrderDetailsLayout.setHorizontalGroup(
            containerOrderDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnFinishOrder, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
            .addGroup(containerOrderDetailsLayout.createSequentialGroup()
                .addComponent(labelOrderDetails)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(containerOrderDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(containerTableOrderItems, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE))
        );
        containerOrderDetailsLayout.setVerticalGroup(
            containerOrderDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerOrderDetailsLayout.createSequentialGroup()
                .addComponent(labelOrderDetails)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 405, Short.MAX_VALUE)
                .addComponent(btnFinishOrder))
            .addGroup(containerOrderDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(containerOrderDetailsLayout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addComponent(containerTableOrderItems, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(30, Short.MAX_VALUE)))
        );

        labelOrderSelector.setText("Pilih Order");

        listOrders.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        containerListOrders.setViewportView(listOrders);

        javax.swing.GroupLayout containerOrderSelectorLayout = new javax.swing.GroupLayout(containerOrderSelector);
        containerOrderSelector.setLayout(containerOrderSelectorLayout);
        containerOrderSelectorLayout.setHorizontalGroup(
            containerOrderSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerOrderSelectorLayout.createSequentialGroup()
                .addComponent(labelOrderSelector)
                .addGap(0, 175, Short.MAX_VALUE))
            .addGroup(containerOrderSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(containerListOrders, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE))
        );
        containerOrderSelectorLayout.setVerticalGroup(
            containerOrderSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerOrderSelectorLayout.createSequentialGroup()
                .addComponent(labelOrderSelector)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(containerOrderSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerOrderSelectorLayout.createSequentialGroup()
                    .addGap(0, 20, Short.MAX_VALUE)
                    .addComponent(containerListOrders, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        labelOrderSelector.getAccessibleContext().setAccessibleName("Pilih Order");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(containerOrderSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(containerOrderDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(containerOrderDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(containerOrderSelector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFinishOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinishOrderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnFinishOrderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewBarista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewBarista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewBarista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewBarista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewBarista().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFinishOrder;
    private javax.swing.JScrollPane containerListOrders;
    private javax.swing.JPanel containerOrderDetails;
    private javax.swing.JPanel containerOrderSelector;
    private javax.swing.JScrollPane containerTableOrderItems;
    private javax.swing.JLabel labelOrderDetails;
    private javax.swing.JLabel labelOrderSelector;
    private javax.swing.JList<String> listOrders;
    private javax.swing.JTable tableOrderItems;
    // End of variables declaration//GEN-END:variables

    // update orders list
    public void updateOrdersList(String[] s) {
        listOrders.setListData(s);
    }
    
    // Order table details, controling content of the table
    public void resetOrderItems() {
        DefaultTableModel model = (DefaultTableModel) tableOrderItems.getModel();
        model.getDataVector().clear();
    }

    public void updateOrderItems(Object[][] content) {
        DefaultTableModel model = (DefaultTableModel) tableOrderItems.getModel();
        model.setDataVector(
                content,
                new String[]{
                    "Kopi", "Jumlah", "Hagra", "Total"
                }
        );
    }

    // Method to identify action source in handler classes
    public JButton getBtnFinishOrder() {
        return btnFinishOrder;
    }
    
    public JList getListOrders() {
        return listOrders;
    }
    
    // Binding ActionListener & MouseListener
    public void addActionListener(ActionListener e) {
        btnFinishOrder.addActionListener(e);
    }
    
    public void addMouseAdapter(MouseAdapter e) {
        listOrders.addMouseListener(e);
    }
}
